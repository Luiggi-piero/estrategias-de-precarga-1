import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';

// Creamos una clase de opciones de precarga
// servir√° para definir las opciones que debe tener una ruta
// para recargar o no un m√≥dulo
export class PreloadingOptions {
  constructor(public routePath: string, public preload: boolean = true) { }
}

/**
 * 
 * 
 * SERVICIO PERSOLANIZADO QUE SE ENCARGAR√Å DE PRECARGAR O NO UN M√ìDULO
 * DE LAS DIFERENTES RUTAS QUE EXISTAN EN EL M√ìDULO DE ENRUTADO (APP-ROUTING.MODULE.TS)
 * Y ESTEN ESPECIFICADAS COMO CARGA PEREZOSA
 * 
 * ‚úÖ LA IDEA ES QUE A TRAV√âS DE UN EVENTO (CLICK, HOVER, LONG PRESS, ETC)
 * SE INICIE LA PRECARGA O NO DE M√ìDULOS. POR LO QUE LOGRAR√çAMOS ADELANTARNOS
 * AL USUARIO PRECARGANDO UN M√ìDULO QUE PREDECIMOS QUE VA A NECESITAR
 * 
 * ‚úÖ CON ESTO SE LOGRAR√çA CONSEGUIR UNA MEJOR EXPERIENCIA DE USUARIO, AL EVITAR QUE LA APLICACI√ìN
 * SE QUEDE CARGANDO CUANDO TENGA QUE DE MANERA PEREZOSA CARGAR UN M√ìDULO DE RUTAS NUEVO.
 * 
 * >> POR EJEMPLO üí° 
 * SI EL USUARIO PASA EL CURSOR POR UN ELEMENTO DEL MENU AL QUE CLARAMENTE
 * VA A NAVEGAR, PRECARGAMOS EL M√ìDULO EN SEGUNDO PLANO, PARA QUE LA NAVEGACI√ìN SEA M√ÅS FLUIDA
 * Y REDUCIR LOS TIEMPOS DE CARGA
 * 
 */

@Injectable({
  providedIn: 'root'
})
export class PreloadingService {

  // Un Subject es un tipo de observable que permite emitir valores
  // a quien est√© suscrito al mismo a trav√©s del m√©todo .next(valor)
  private _subject = new Subject<PreloadingOptions>();

  // Cualquier Subject puede ser tratddo como un observable y es el
  // que tenemos que hacer p√∫blico.
  // Con √©l vamos a ofrecer las opciones de la ruta que desea ser precargada como un Observable.
  public options$ = this._subject.asObservable();

  /**
   * M√©todo que eval√∫a la precarga
   * @param routePath Ruta que se desea precargar
   */
  comenzarPrecarga(routePath: string){
    
    // Creamos unas opciones de precarga
    const opcionesPrecarga = new PreloadingOptions(routePath, true);

    // Emitimos las opciones que desean ser precargadas
    // Esta informaci√≥n la escuchar√° la ESTRATEGIA DE PRECARGA
    // * ON-DEMAND-PRELOADING-STRATEGY
    // Para evaluar si debe o no debe precargar la ruta
    this._subject.next(opcionesPrecarga);
  }
}
